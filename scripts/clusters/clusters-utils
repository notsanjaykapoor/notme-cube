#!/usr/bin/env python

import os
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import dot_init

import models
import services.clusters
import services.clusters.requests
import services.database.session
import services.machines
import services.machines.containers

import click

@click.group()
def cli():
    pass


@click.command()
@click.option("--name", default=None, required=True, help="cluster name")
@click.option("--service", default=None, required=True, help="cluster services, comma separated")
def create(name: str, service: str):
    """ create cluster """

    _print_status(f"cluster create '{name}', service '{service}'")

    with services.database.session.get() as db_session:
        try:
            cluster = services.clusters.create(
                db_session=db_session,
                name=name,
                services=service,
            )

            _print_ok(f"cluster create ok - name '{cluster.name}', service '{service}'")
        except Exception as e:
            _print_error(f"cluster create exception - {e}")


@click.command()
@click.option("--name", default=None, required=True, help="cluster name")
@click.option("--queue", default=None, required=True, help="queue name")
def create_workq(name: str, queue: str):
    """ create workq cluster """

    with services.database.session.get() as db_session:
        cluster = services.clusters.get_by_name(db_session=db_session, name=name)

        # cluster check/create

        _print_status(f"cluster create workq '{name}' - check")

        if cluster:
            _print_status(f"cluster create workq '{name}' - exists")
        else:
            cluster = services.clusters.create(
                db_session=db_session,
                name=name,
                services=models.service.SERVICE_WORKQ,
                data={
                    "queue": queue,
                }
            )

            _print_ok(f"cluster create workq '{name}' - created")

        # skip machines and containers for now

        exit(0)

        # machines check/create

        _print_status(f"cluster create workq '{name}', machines - check")

        list_result = services.machines.list(cluster=cluster)
        machines_list = [machine for machine in list_result.objects_list if models.service.SERVICE_WORKQ_DAEMON in machine.services_list]
        machine = machines_list[0] if machines_list else None

        if machine:
            _print_status(f"cluster create workq '{name}', machine '{machine.name}', service '{machine.services}' - exists")
        else:
            # create machine with workq daemon service
            machine_name = f"{cluster.name}-0"
            machine_tags = {
                "queue": queue,
                "services": models.service.SERVICE_WORKQ_DAEMON,
            }
            code, machine = services.clusters.requests.machine_add(cluster=cluster, machine_name=machine_name, machine_tags=machine_tags)

            if code !=0:
                _print_error(f"cluster create workq '{name}' machine '{machine.name}' - exception {code}")
                exit(machine_code)

            cluster.size_ask = len(list_result.objects_list)
            cluster.size_has = len(list_result.objects_list)

            db_session.add(cluster)
            db_session.commit()

            _print_ok(f"cluster create workq '{name}' machine '{machine.name}', service '{machine.services}' - created")

        # containers check/create

        _print_status(f"cluster create workq '{name}', machine '{machine.name}', service '{machine.services}' containers - check")

        check_result = services.machines.containers.check(machine=machine)

        for container in check_result.containers_missing:
            # start container service
            start_result = services.machines.containers.start(machine=machine, service=container.name)

            if start_result.code != 0:
                _print_status(f"cluster create workq '{name}', machine '{machine.name}', service '{machine.services}' container '{container.name}' - exception {start_result.code}")
                exit(start_result.code)

            _print_ok(f"cluster create workq '{name}', machine '{machine.name}', service '{machine.services}' container '{container.name}' - started")

        for container in check_result.containers_running:
            _print_status(f"cluster create workq '{name}', machine '{machine.name}', service '{machine.services}' container '{container.name}' - exists")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(create)
cli.add_command(create_workq)


if __name__ == "__main__":
    cli()