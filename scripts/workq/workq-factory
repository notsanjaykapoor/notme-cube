#!/usr/bin/env python

import functools
import random
import sys

sys.path.append(".")

import asyncio
import click
import dotenv

dotenv.load_dotenv()

import log
import models
import services.clusters
import services.database
import services.workers
import services.workq

logger = log.init("api")


def coro(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))

    return wrapper


@click.group()
def cli():
    pass


@click.command()
@coro
@click.option("--cluster", "cluster_name", default=None, required=True, help="cluster name")
@click.option("--count", default=0, required=True, help="number of jobs to add")
@click.option("--min", default=30, required=False, help="minimum job seconds")
@click.option("--max", default=45, required=False, help="maximum job seconds")
async def add_default(cluster_name: str, count: int, min: int, max: int):
    """
    add default jobs to cluster queue
    """
    with services.database.session.get() as db_session:
        cluster = services.clusters.get_by_id_or_name(db_session=db_session, id=cluster_name)
        queue = cluster.queue

        logger.info(f"cluster '{cluster_name}' queue '{queue}' add {count} try")

        for _i in range(count):
            services.workq.add(
                db_session=db_session,
                queue=queue,
                partition=-1,
                msg=models.workq.MSG_SLEEP,
                data={
                    "seconds": random.randint(min, max)
                })

        logger.info(f"cluster '{cluster_name}' queue '{queue}' add {count} completed")


@click.command()
@coro
@click.option("--cluster", "cluster_name", default=None, required=True, help="cluster name")
@click.option("--worker-name", default=None, required=True, help="worker name")
async def add_shutdown(cluster_name: str, worker_name: str):
    """
    add shutdown job to cluster queue
    """
    with services.database.session.get() as db_session:
        cluster = services.clusters.get_by_id_or_name(db_session=db_session, id=cluster_name)
        queue = cluster.queue

        logger.info(f"cluster '{cluster_name}' queue '{queue}' shutdown {worker_name}")

        services.workers.shutdown(
            db_session=db_session,
            queue=queue,
            sender="script",
            worker_name=worker_name,
        )

    logger.info(f"cluster '{cluster_name}' queue '{queue}' shutdown {worker_name} ok")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(add_default)
cli.add_command(add_shutdown)

if __name__ == "__main__":
    asyncio.run(cli())
