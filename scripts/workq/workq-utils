#!/usr/bin/env python

import functools
import random
import sys

sys.path.append(".")

import asyncio
import click
import dotenv

dotenv.load_dotenv()

import log
import models
import services.database
import services.workers
import services.workq

logger = log.init("api")


def coro(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))

    return wrapper


@click.group()
def cli():
    pass


@click.command()
@coro
@click.option("--queue", default=None, required=True, help="workq queue name")
@click.option("--worker-name", default=None, required=True, help="worker name")
async def job_shutdown(queue: str, worker_name: str):
    """
    add shutdown job to workq
    """

    logger.info(f"work queue '{queue}' shutdown {worker_name}")

    with services.database.session.get() as db_session:
        services.workers.shutdown(
            db_session=db_session,
            queue=queue,
            sender="script",
            worker_name=worker_name,
        )

    logger.info(f"work queue '{queue}' shutdown {worker_name} ok")


@click.command()
@coro
@click.option("--queue", default=None, required=True, help="workq queue name")
@click.option("--count", default=0, required=True, help="number of jobs to add")
async def job_sleep(queue: str, count: int):
    """
    add sleep jobs to workq
    """

    logger.info(f"work queue '{queue}' add {count}")

    with services.database.session.get() as db_session:
        for _i in range(count):
            services.workq.add(
                db_session=db_session,
                queue=queue,
                partition=-1,
                msg=models.workq.MSG_SLEEP,
                data={
                    "seconds": random.randint(5,30)
                })

    logger.info(f"work queue '{queue}' add {count} completed")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(job_shutdown)
cli.add_command(job_sleep)

if __name__ == "__main__":
    asyncio.run(cli())
