#!/usr/bin/env python

import os
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import dot_init

import models
import services.clusters
import services.clusters.requests
import services.database.session
import services.machines
import services.machines.containers

import click

@click.group()
def cli():
    pass


@click.command()
@click.option("--name", default=None, required=True, help="cluster name")
@click.option("--service", default=None, required=True, help="cluster services, comma separated")
def create(name: str, service: str):
    """ create cluster """

    _print_status(f"cluster create '{name}', service '{service}'")

    with services.database.session.get() as db_session:
        try:
            cluster = services.clusters.create(
                db_session=db_session,
                name=name,
                services=service,
            )

            _print_ok(f"cluster create ok - name '{cluster.name}', service '{service}'")
        except Exception as e:
            _print_error(f"cluster create exception - {e}")


@click.command()
@click.option("--name", default=None, required=True, help="cluster name")
@click.option("--queue", default=None, required=True, help="queue name")
def create_workq(name: str, queue: str):
    """ create workq cluster """

    with services.database.session.get() as db_session:
        cluster = services.clusters.get_by_name(db_session=db_session, name=name)

        # cluster check/create

        _print_status(f"cluster create workq '{name}' - check")

        if cluster:
            _print_status(f"cluster create workq '{name}' - exists")
        else:
            cluster = services.clusters.create(
                db_session=db_session,
                name=name,
                services=models.service.SERVICE_WORKQ,
                data={
                    "queue": queue,
                }
            )

            _print_ok(f"cluster create workq '{name}' - created")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(create)
cli.add_command(create_workq)


if __name__ == "__main__":
    cli()