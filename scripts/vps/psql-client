#!/usr/bin/env python3

import argparse
import os

ENV_FILE = ".env.boot"


def _dot_env_boot(file: str) -> int:
    """
    simple dot env parser
    """
    if not os.path.exists(file):
        return 1

    with open(file, "r") as f:
        lines = f.read().split("\n")
        
    for line in lines:
        if not line or "=" not in line:
            continue
        
        key, val = line.split("=")
        os.environ[key] = val


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="psql client")
    parser.add_argument("--db", help="postgres db", type=str, default="")
    parser.add_argument("--host", help="postgres host", type=str, default="0.0.0.0")
    parser.add_argument("--password", help="postgres password", type=str)
    parser.add_argument("--port", help="postgres port", type=int, default=5433)
    parser.add_argument("--user", help="postgres user", type=str, default="postgres")

    pargs = parser.parse_args()

    _dot_env_boot(file=ENV_FILE)

    password = pargs.password or os.environ.get("POSTGRES_PASS")

    if not password:
        parser.print_help()
        exit(0)

    psql_cmd = f"psql postgresql://{pargs.user}:{password}@{pargs.host}:{pargs.port}"

    if pargs.db:
        psql_cmd = f"{psql_cmd}/{pargs.db}"

    _print_status(psql_cmd)

    os.system(psql_cmd)
