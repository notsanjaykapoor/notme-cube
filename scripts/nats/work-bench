#!/usr/bin/env python

import functools
import random
import sys

sys.path.append(".")

import asyncio
import click
import dotenv

dotenv.load_dotenv()

import log
import services.database
import services.workq

logger = log.init("api")


def coro(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))

    return wrapper


@click.group()
def cli():
    pass


@click.command()
@coro
@click.option("--subject", default=None, required=True, help="nats subject")
@click.option("--count", default=0, required=True, help="number of jobs to queue")
async def queue(subject: str, count: int):
    """
    queue some work
    """

    logger.info(f"work subject '{subject}' queuing {count}")

    with services.database.session.get() as db_session:
        for _i in range(count):
            services.workq.add(
                db_session=db_session,
                queue=subject,
                partition=-1,
                msg="sleep",
                data={
                    "seconds": random.randint(5,30)
                })

    logger.info(f"work subject '{subject}' queuing {count} completed")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(queue)

if __name__ == "__main__":
    asyncio.run(cli())
