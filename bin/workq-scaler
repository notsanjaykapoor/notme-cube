#!/usr/bin/env python

import functools
import json
import os
import signal
import sys

sys.path.append(".")

import dot_init

import asyncio
import click
import nats

import log
import models
import services.database
import services.workers

logger = log.init("api")

shutdown: bool = False


workers_set = set()
workers_map = {}

def coro(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))

    return wrapper


@click.group()
def cli():
    pass


def signal_handler(signum, frame):
    global shutdown
    shutdown = True
    logger.info("workq scaler signal handler ... preparing to shutdown")


@click.command()
@click.option('--db-uri', default="", required=False, help="db uri string, e.g. postgresql://postgres:postgres@postgres-dev:5433/db_src")
@click.option('--interval', default=5, required=False, help="")
@coro
async def run(db_uri: str, interval: int) -> dict:
    db_uri = db_uri or os.environ.get("DATABASE_URL")

    if not db_uri:
        raise ValueError("db_uri is invalid or missing")

    # install signal handler
    signal.signal(signal.SIGINT, signal_handler)

    # clear workers table
    with services.database.session.get() as db_session:
        services.workers.truncate(db_session=db_session)

    logger.info("workq scaler starting")

    nats_client = await nats.connect(os.environ.get("NATS_URI"))

    nats_sub = await nats_client.subscribe("workers.*", "", message_handler)
    
    while not shutdown:
        await asyncio.sleep(interval)

    logger.info("workq scaler nats closing")

    await nats_client.close()

    logger.info("workq scaler exiting")


async def message_handler(msg):
    msg_data = json.loads(msg.data.decode())

    with services.database.session.get() as db_session:
        if msg.subject.endswith("pong"):
            logger.info(f"workq scaler pong {msg_data}")
            worker_id = msg_data.get("worker")
            workers_set.add(worker_id)

            # add worker to db
            services.workers.get_by_name(
                db_session=db_session, name=worker_id,
            ) or services.workers.create(
                db_session=db_session, name=worker_id,
            )
        elif msg.subject.endswith("shutdown"):
            logger.info(f"workq scaler shutdown {msg_data}")
            worker_id = msg_data.get("worker")
            workers_set.remove(worker_id)

            # remove worker from db
            services.workers.delete_by_name(db_session=db_session, name=worker_id)

    logger.info(f"workq scaler workers {workers_set}")


cli.add_command(run)

if __name__ == "__main__":
    asyncio.run(cli())